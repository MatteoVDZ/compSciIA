package com.example.demo4;import javafx.event.ActionEvent;import javafx.fxml.FXML;import javafx.scene.Node;import javafx.scene.control.*;import java.sql.*;public class Customers {    static final String DB_URL = "jdbc:mysql://localhost:3306/clothing";    static String driverName = "com.mysql.cj.jdbc.Driver";    static final String USER = "root";    static final String PASS = "WilleM8477";    static final String QUERY = "SELECT * FROM customers";    static Connection conn = null;    static ResultSet customer_rs;    static boolean currentlyEditing = false;    static boolean currentlyInserting = false;    @FXML CheckBox multiplePurchases;    @FXML CheckBox singlePurchases;    @FXML TextField txtCustomerID;    @FXML TextField txtFirstName;    @FXML TextField txtLastName;    @FXML TextField txtCountry;    @FXML TextField txtPayment;    @FXML Button btnSearch;    @FXML Button btnEdit;    @FXML Button btnInsert;    @FXML Button btnDelete;    @FXML Button btnNext;    @FXML Button btnPrevious;    @FXML Button btnProducts;    @FXML Button btnSales;    @FXML CheckBox btnUSA;    @FXML CheckBox btnItaly;    @FXML CheckBox btnNoFilter;    @FXML Button btnDetails;    @FXML CheckBox btnPayPal;    @FXML CheckBox btnCreditCard;    @FXML Button btnReport;    public Customers() throws SQLException {    }    @FXML    public void initialize(){        // Open a connection        try {Connection conn = null;            Class.forName(driverName).newInstance();            conn = DriverManager.getConnection(DB_URL, USER, PASS);            Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);            customer_rs = stmt.executeQuery(QUERY);            customer_rs.next();            updateTextInFields();            setEditable(false);        } catch (Exception e) {            e.printStackTrace();        }    }    private void setEditable(boolean editable) {        txtCustomerID.setEditable(editable);        txtFirstName.setEditable(editable);        txtLastName.setEditable(editable);        txtCountry.setEditable(editable);        txtPayment.setEditable(editable);    }    @FXML    protected void next(ActionEvent event){        try{            if (customer_rs.isLast()) {                customer_rs.first();            } else {                customer_rs.next();            }            updateTextInFields();        } catch (Exception e) {            e.printStackTrace();            //next(event);        }    }    @FXML    protected void previous(ActionEvent event){        try{            if (customer_rs.isFirst()) {                customer_rs.last();            } else {                customer_rs.previous();            }            updateTextInFields();        } catch (Exception e) {            e.printStackTrace();            //previous(event);        }    }    protected void updateTextInFields(){        try{            txtCustomerID.setText(customer_rs.getString("customer_id"));            txtFirstName.setText(customer_rs.getString("first_name"));            txtLastName.setText(customer_rs.getString("last_name"));            txtCountry.setText(customer_rs.getString("country"));            txtPayment.setText(customer_rs.getString("payment_method"));        } catch (Exception e) {            e.printStackTrace();        }    }    public String getCurrentID() throws SQLException {        return customer_rs.getString("customer_id");    }    public Integer getFinalID() throws SQLException {        customer_rs.last();        return Integer.parseInt(customer_rs.getString("customer_id")) + 1;    }    @FXML protected void update(){        if (!currentlyEditing) {            setEditable(true);            currentlyEditing = true;            btnEdit.setText("Save");        }        else {            try{                customer_rs.updateString("first_name", txtFirstName.getText());                customer_rs.updateString("last_name", txtLastName.getText());                customer_rs.updateString("country", txtCountry.getText());                customer_rs.updateString("payment_method", txtPayment.getText());                customer_rs.updateRow();                setEditable(false);                currentlyEditing = false;                btnEdit.setText("Edit");                updateTextInFields();            }            catch (Exception e) {                e.printStackTrace();            }        }    }    public void insert(ActionEvent actionEvent) throws Exception{        Main.getInstance().showCustomerDetails(true);    }    @FXML    public void delete(ActionEvent actionEvent) {        try {            String delete_sql = "DELETE FROM customers WHERE customer_id=" + txtCustomerID.getText();            conn = DriverManager.getConnection(DB_URL, USER, PASS);            Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);            stmt.executeUpdate(delete_sql);            customer_rs.deleteRow();            updateTextInFields();            Dialog dialog = new Dialog();            dialog.setContentText("Record Deleted");            dialog.getDialogPane().getButtonTypes().add(ButtonType.CLOSE);            Node closeButton = dialog.getDialogPane().lookupButton(ButtonType.CLOSE);            closeButton.managedProperty().bind(closeButton.visibleProperty());            closeButton.setVisible(false);            dialog.showAndWait();        } catch (Exception e) {            Dialog dialog = new Dialog();            dialog.setContentText("Error in Deleting");            dialog.getDialogPane().getButtonTypes().add(ButtonType.CLOSE);            Node closeButton = dialog.getDialogPane().lookupButton(ButtonType.CLOSE);            closeButton.managedProperty().bind(closeButton.visibleProperty());            closeButton.setVisible(false);            dialog.showAndWait();            e.printStackTrace();        }    }    public void switchToProducts(ActionEvent event) {        Main.getInstance().showProductsScene();    }    public void switchToSales(ActionEvent event) {        Main.getInstance().showSalesScene();    }    public void seeMore(ActionEvent event) {        Main.getInstance().showCustomerDetails(false);    }    String newQuery = "SELECT * FROM customers";    public void filter(ActionEvent event) {        if(btnNoFilter.isSelected()) {            newQuery = "SELECT * FROM customers";            singlePurchases.setSelected(false);            multiplePurchases.setSelected(false);            btnItaly.setSelected(false);            btnUSA.setSelected(false);            btnPayPal.setSelected(false);            btnCreditCard.setSelected(false);        } if(multiplePurchases.isSelected()) {            newQuery = "SELECT * FROM customers WHERE purchases > 1";            singlePurchases.setSelected(false);            btnNoFilter.setSelected(false);            btnItaly.setSelected(false);            btnUSA.setSelected(false);            btnPayPal.setSelected(false);            btnCreditCard.setSelected(false);        } if(singlePurchases.isSelected()){            newQuery = "SELECT * FROM customers WHERE purchases = 1";            btnNoFilter.setSelected(false);            multiplePurchases.setSelected(false);            btnItaly.setSelected(false);            btnUSA.setSelected(false);            btnPayPal.setSelected(false);            btnCreditCard.setSelected(false);        } if(btnUSA.isSelected()){            newQuery = "SELECT * FROM customers WHERE country = 'USA'";            btnNoFilter.setSelected(false);            multiplePurchases.setSelected(false);            btnItaly.setSelected(false);            singlePurchases.setSelected(false);            btnPayPal.setSelected(false);            btnCreditCard.setSelected(false);        } if(btnItaly.isSelected()){            newQuery = "SELECT * FROM customers WHERE country = 'Italy'";            btnNoFilter.setSelected(false);            multiplePurchases.setSelected(false);            singlePurchases.setSelected(false);            btnUSA.setSelected(false);            btnPayPal.setSelected(false);            btnCreditCard.setSelected(false);        } if(btnPayPal.isSelected()) {            newQuery = "SELECT * FROM customers WHERE payment_method = 'PayPal'";            btnNoFilter.setSelected(false);            multiplePurchases.setSelected(false);            btnItaly.setSelected(false);            btnUSA.setSelected(false);            singlePurchases.setSelected(false);            btnCreditCard.setSelected(false);        } if(btnCreditCard.isSelected()) {            newQuery = "SELECT * FROM customers WHERE payment_method = 'Credit Card'";            btnNoFilter.setSelected(false);            multiplePurchases.setSelected(false);            btnItaly.setSelected(false);            btnUSA.setSelected(false);            btnPayPal.setSelected(false);            singlePurchases.setSelected(false);        }        try {Connection conn = null;            Class.forName(driverName).newInstance();            conn = DriverManager.getConnection(DB_URL, USER, PASS);            Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);            customer_rs = stmt.executeQuery(newQuery);            customer_rs.next();            updateTextInFields();            setEditable(false);        } catch (Exception e) {            e.printStackTrace();        }    }    public void search(ActionEvent event) throws SQLException {        TextInputDialog dialog = new TextInputDialog();        dialog.setTitle("Customer Search");        dialog.setHeaderText("Enter Customer ID");        dialog.setContentText("Customer ID:");        java.util.Optional<String> result = dialog.showAndWait();        if (result.isPresent()) {            String customerId = result.get();            while(customer_rs.next()) {                if(customer_rs.getString("customer_id").equals(customerId)) {                    updateTextInFields();                    break;                }            }        }    }    public void report(ActionEvent event) { Main.getInstance().showReportScene();}}